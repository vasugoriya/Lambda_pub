name: Dev Provisioning and Lambda Deployment

on:
  push:
    branches:
      - 'main'
  workflow_call:
    inputs:
      environment:
        type: string
        description: "Environment to deploy to"
        default: "Dev"
      working_directory:
        type: string
        description: "The directory where code resides"
        default: "./Lambda"
      lambda_function_name:
        type: string
        description: "Name of the Lambda function to deploy"
      aws_region:
        type: string
        description: "If using AWS, the region to target. Defaults to us-east-1."
        default: "us-west-2"
      use_oidc:
        type: string
        description: "Use the OIDC provider to authenticate the provisioning process"
        default: "false"
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
 
jobs:
  build:
    name: Code build
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
 
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
 
      - name: Install Dependencies
        run: cd${{ inputs.working_directory }} && npm install

      - name: pwd
        run: ls
 
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: lambda-artifacts
          path: ${{ inputs.working_directory }}/*

 
  deploy:
    name: Code Deploy
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: ${{ inputs.environment }}
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: lambda-artifacts
          path: ./

      - name: Log in to AWS using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        if: ${{ inputs.use_oidc == 'true' }}
        with:
          aws-region: ${{ inputs.aws_region }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_NUMBER }}:role/${{ secrets.AWS_ASSUME_ROLE }}
 
      - name: Update Lambda Function Code
        run: |
          LAMBDA_FUNCTION_NAME=${{ inputs.lambda_function_name }}
          zip -r lambda_function.zip .
          aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --zip-file fileb://lambda_function.zip
          rm lambda_function.zip
